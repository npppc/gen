<?php

namespace %namespace%\Domain;

use Npc\DDD\Domain\Entity;
use Firebase\JWT\JWT;
use Firebase\JWT\Key;
use Psr\Http\Message\StreamInterface;
use GuzzleHttp\Client as Curl;
use GuzzleHttp\Exception\GuzzleException;
use Exception;

class BaseService
{
    private static $user = [
        'uid' => '%uid%',
        'name' => '%name%',
        'email' => '%email%',
        'appKey' => '%appKey%',
    ];
    private static $appKey = '%appKey%';
    private static $signerKey = '%signerKey%';
    private static $token = '';

    public static function getToken()
    {
        if (! self::$token) {
            self::$token = JWT::encode([
                'iss' => self::$appKey,
                'aud' => self::$appKey,
                'jti' => self::$appKey,
                'iat' => time(),
                'nbf' => time() - 3600,
                'exp' => time() + 86400 * 7,
            ],self::$signerKey,'HS256',null,self::$user);
        }
        return self::$token;
    }

    /**
     * @param string $uri
     * @param array $form_params
     * @return StreamInterface
     * @throws GuzzleException
     */
    public static function curl(string $uri, array $form_params)
    {
        $curl = new Curl();
        $callback = $curl->post('%remote_host%'.$uri,[
            'headers' => [
                'User-Agent' => 'Api V1.0',
                'Content-Type' => 'application/x-www-form-urlencoded;charset=utf-8',
                'Accept' => 'application/json',
                'Authorization-Finance' => (string) self::getToken(),
            ],
            'form_params' => $form_params,
        ]);
        if($callback->getStatusCode() != 200)
        {
            throw new Exception($callback->getBody());
        }

        return $callback->getBody();
    }

    /**
     * TODO 能否根据远程输出的 序列化对象反序列化出来 或者根据某种定义 直接恢复出具体的对象来
     * @param string $uri
     * @param array $params
     * @return mixed
     * @throws GuzzleException
     */
    public static function getJson(string $uri, $params = [])
    {
        $ret = self::curl($uri, $params);
        $json = json_decode($ret, true);
        if($json)
        {
            if ($json['f'] == 1) {
                if(is_array($json['d']))
                {
                    return $json['d'];
                }
                return unserialize($json['d']);
            } else {
                throw new Exception($json['m']);
            }
        }
        throw new Exception('invalid response '.$ret);
    }

    /**
     * @param string $resource_uri
     * @param Entity $params
     * @return array|mixed
     * @throws Exception
     */
    public static function query(string $resource_uri, Entity $params)
    {
        try{
            return self::getJson($resource_uri, $params->toArray()); // TODO: Change the autogenerated stub
        }
        catch (GuzzleException $e)
        {
            throw new Exception($e->getMessage());
        }
    }
}